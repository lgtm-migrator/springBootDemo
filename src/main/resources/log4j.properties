#threshold是个全局的过滤器，把低于所设置的level的信息过滤掉，不显示出来。
log4j.appender.CONSOLE.Threshold=INFO
#log4j.appender.console.Threshold=DEBUG
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
#log4j.appender.CONSOLE.layout.ConversionPattern=[%-5p] %d(%r) --> [%t] %l: %m %x %n
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
log4j.appender.CONSOLE.Target=System.err
##设置日志记录到控制台的方式
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
##设置日志记录到文件的方式
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=mylog.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
##日志输出的级别，以及配置记录方案
log4j.rootLogger=DEBUG,CONSOLE,druid
## 单独设置 hibernate sql 日志的级别（可看到绑定参数值）
log4j.logger.org.hibernate.type=TRACE
# Druid
log4j.logger.druid.sql=DEBUG,druid
log4j.logger.druid.sql.DataSource=warn,druid
log4j.logger.druid.sql.Connection=warn,druid
log4j.logger.druid.sql.Statement=DEBUG,druid
log4j.logger.druid.sql.ResultSet=warn,druid
log4j.appender.druid=org.apache.log4j.DailyRollingFileAppender
log4j.appender.druid.layout=org.apache.log4j.PatternLayout
log4j.appender.druid.layout.ConversionPattern=[%d{HH\:mm\:ss}] %c{1} - %m%n
log4j.appender.druid.datePattern='.'yyyy-MM-dd
log4j.appender.druid.Threshold=WARN
log4j.appender.druid.append=true
log4j.appender.druid.File=${catalina.home}/logs/ssm-maven/druid-slow-sql.log
#------------------------------------------------------------------------
#    %m 输出代码中指定的消息
#    %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#    %r 输出自应用启动到输出该log信息耗费的毫秒数
#    %c 输出所属的类目，通常就是所在类的全名
#    %t 输出产生该日志事件的线程名
#    %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#    %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 ：10：28，921
#    %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#    %x Used to output the NDC (nested diagnostic context) associated with the thread that generated the logging event
#    %X Used to output the MDC (mapped diagnostic context) associated with the thread that generated the logging event for specified key
#------------------------------------------------------------------------