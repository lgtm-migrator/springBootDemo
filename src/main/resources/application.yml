server:
  port: 8080
#  ssl:
#    key-store: classpath:httpsKey.p12 #key-store表示密钥文件名
#    key-alias: tomcathttps #key-alias表示密钥别名
#    key-store-password: 123456 # key-store-password就是在cmd命令执行过程中输入的密码
spring:
  application:
    name: springBootDemo
  servlet:
    multipart:
      enabled: true
      max-file-size: 1000MB
      max-request-size: 2000MB
  boot:
    admin:
      client:
        # Spring Boot Admin 服务端地址
        url: http://tang:123456@192.168.1.105:9301
        instance:
          metadata:
            # 客户端端点信息的安全认证信息
            user.name: ${spring.security.user.name}
            user.password: ${spring.security.user.password}
  jackson:
    date-format: yyyy/MM/dd HH:mm:ss
    time-zone: GMT+8
  thymeleaf:
    mode: HTML
    encoding: UTF-8
    prefix: classpath:/templates/
    suffix: .html
    cache: false
  banner:
    location: static/banner.txt
  profiles:
    active: druid
    #切换配置文件
  #    spring.profiles.include: druid,ddd
  cache:
    type: redis
  redis:
    host: 127.0.0.1
    password:
    database: 1
    timeout: 3000
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  security:
    user:
      name: tang
      password: tang
  data:
    redis:
      repositories:
        enabled: false
    mongodb:
      username: root
      password: root
      host: localhost # mongodb的连接地址
      port: 27017 # mongodb的连接端口号
      database: tl # mongodb的连接的数据库
      authenticationDatabase: admin
    elasticsearch:
      repositories:
        enabled: true
  rabbitmq:
    host: 192.168.1.180
    port: 5672
    username: tang
    password: tang
    virtualHost: /
    listener:
      simple:
        concurrency: 10
        max-concurrency: 100
  mail:
    protocol: smtps
    host: smtp.163.com
    port: 994
    username: tang97155@163.com
    password: ELACZHTZLMLVJYDF
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  elasticsearch:
    rest:
      uris: http://localhost:9200
#  boot:
#    admin:
#      client:
#        url: http://192.168.1.180:8000/admin-server
  quartz:
    job-store-type: jdbc # quartz任务存储类型：jdbc或memory
    wait-for-jobs-to-complete-on-shutdown: true # 关闭时等待任务完成
    overwrite-existing-jobs: true # 可以覆盖已有的任务
    properties: # quartz原生配置
      org:
        quartz:
          scheduler:
            instanceName: demo-quartz # 调度器实例名称
            instanceId: AUTO # 调度器实例ID自动生成
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX # 调度信息存储处理类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 使用完全兼容JDBC的驱动
            tablePrefix: QRTZ_ # quartz相关表前缀
            useProperties: false # 是否将JobDataMap中的属性转为字符串存储
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool # 指定线程池实现类，对调度器提供固定大小的线程池
            threadCount: 10 # 设置并发线程数量
            threadPriority: 5 # 指定线程优先级
logging:
  level:
    root: info #日志配置,DEBUG,INFO,WARN,ERROR
    #org.springframework.data.mongodb.core: DEBUG
    #    org.springframework.web: debug
    druid:
      sql:
        Statement: DEBUG
    springfox:
      documentation:
        spring:
          web:
            readers:
              operation:
                CachingOperationNameGenerator: WARN
    org:
      springframework:
        data:
          mongodb:
            core: DEBUG
          convert:
            CustomConversions: ERROR
          elasticsearch:
            core: DEBUG
            support:
              VersionInfo: WARN
          repository:
            config:
              RepositoryConfigurationDelegate: WARN
              RepositoryConfigurationExtensionSupport: WARN
    com:
      tangl:
        demo:
          config:
            RedisConfig: DEBUG
  file:
    path: demoLog
# actuator监控
management:
  security:
    enabled: true
  server:
    # 设置监控服务端口
    port: 8080
  endpoint:
    health:
      show-details: always
  endpoints:
    # 设置端点是否可用 默认只有shutdown可用
    enabled-by-default: true
    web:
      base-path: /actuator #基本路径
      # 设置是否暴露端点 默认只有health和info可见
      exposure:
        # 包括所有端点
        include: "*" # 注意需要添加引号
        # 排除端点
        exclude: shutdown
        # 跨域处理
      cors:
        allowed-origins: http://localhost:8080/   #允许跨域的ip地址
        allowed-methods: post,delete,get,put #允许通过的请求，还有支持时间
info: #下面的值全部自定义即可
  app:
    name: springBootDemo
    version: v1.0.0
    encoding: @project.build.sourceEncoding@  #应用编码
    java:
      source: @java.version@  #jdk 版本
      target: @java.version@  #jdk 版本
  author:
    name: tangliang  #作者姓名
    phone: 15566418409  #作者联系方式
http:
  maxTotal: 500 #设置连接总数
  defaultMaxPerRoute: 100 #设置每个主机最大的并发数
  connectTimeout: 2000 #设置创建连接的最长时间
  connectionRequestTimeout: 500 #从连接池中获取到连接的最长时间
  socketTimeout: 6000 #数据传输的最长时间
  maxIdleTime: 1 #空闲时间(用于定期清理空闲连接)
  waitTime: 30000
  idleConTime: 3
  retryCount: 3
  validateAfterInactivity: 1000
# Swagger配置
swagger:
  # 是否开启swagger
  enabled: true
  # 请求前缀
  pathMapping: /
## 自定义redis key
redis:
  key:
    prefix:
      authCode: "demo:authCode:"
    expire:
      authCode: 120 # 验证码超期时间
aliyun:
  sms:
    accessKeyId: LTAI4G6ZehpPRL1MT59QoMoZ
    accessKeySecret: yFpmuwHsuF630ua1iUBCDa0jcJh0Hy
    template_code: SMS_198667593
    sign_name: ABC商城
#线程池配置
thread:
  corePoolSize: 50 #核心线程数
  maxPoolSize: 200 #设置最大线程数
  queueCapacity: 1000 #队列容量
  keepAliveSeconds: 30 #线程活跃时间（秒）
  threadNamePrefix: Tang-Executor #默认线程名称
xss:
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /druid/*,/js/*,/css/*
  # 匹配链接
  urlPatterns: /*
# MinIO对象存储相关配置
minio:
  endpoint: http://192.168.1.180:9000 #MinIO服务所在地址
  bucketName: springbd #存储桶名称
  accessKey: tangliang #访问的key
  secretKey: tangliang #访问的秘钥
rabbitmq:
  mqtt:
    url: tcp://localhost:1883
    username: tang
    password: tang
    defaultTopic: testTopic



